<template>
  <import src="../utils/recordItem.wxml"/>
  <import src="../utils/common.wxml"/>
  <navigationBar pageName="发现" showBackIcon="{{false}}"/>

  <view class="container">
    <view class="header {{darkMode?'bgColorB1':'bgColorW1'}}" style="top:{{navH}}px">
      <picker class="picker_distance" range="{{distanceType}}" range-key="text" value="{{distanceIndex}}" bindchange="changeFilter" data-type="0">
        <button class="picker_btn {{darkMode ? 'fontColorW2':'fontColorB2'}}">{{distanceType[distanceIndex].text}}</button>
      </picker>
      <picker class="picker_sort" range="{{sortType}}" range-key="text" value="{{sortIndex}}" bindchange="changeFilter" data-type="1">
        <button class="picker_btn {{darkMode ? 'fontColorW2':'fontColorB2'}}">{{sortType[sortIndex].text}}</button>
      </picker>
    </view>
    <view class="header_holder"></view>

    <template is="emptyView" data="{{isShow: !recordList[0].length, type:0, textArr:['要不点击上方↖↗换个筛选条件试试？或者','去发布','分享给你的附近吧～0v0']}}"/>
    <block wx:for="{{recordList[0]}}" wx:key="{{item.recordId}}" wx:for-index="row">
    <template is="recordItem" data="{{record:item, rcdIndex:{section:0, row:row}, rcdType:1, darkMode:darkMode}}"/>
    </block>

    <image class="point themeMode" src="../image/icon/toMapPage.png" mode="aspectFit" catchtap="clickToMapPage"></image>
  </view>
  <view class="bottomHolder"/>
</template>

<script>
  import { createPage } from '@mpxjs/core'
  import net from '../utils/net'
  import { storeMode } from '../stores/storeCommon'
  import { behaviorOnRecord } from '../behavior/behaviorOnRecord'
  import { behaviorOnPage } from '../behavior/behaviorOnPage'

  const common = require('../utils/common.js')
  const app = getApp()

  const distanceType = [
    { text: '1km内', distance: 1 },
    { text: '5km内', distance: 5 },
    { text: '10km内', distance: 10 },
    { text: '20km内', distance: 20 },
    { text: '40km内', distance: 40 },
    { text: '全网', distance: -1 }
  ]
  const sortType = [
    { text: '今日最热', type: 3 },
    { text: '本周最热', type: 4 },
    { text: '最新', type: 1 },
    { text: '最早', type: 2 }
  ]

  createPage({
    behaviors: [behaviorOnRecord, behaviorOnPage],
    data: {
      recordList: [[], []],
      distanceType: distanceType,
      distanceIndex: wx.getStorageSync('find_distanceIndex') || 3,
      sortType: sortType,
      sortIndex: wx.getStorageSync('find_sortIndex') || 2,
      navH: app.globalData.navHeight,
      pageLocation: {}
    },
    computed: {
      ...storeMode.mapState(['darkMode'])
    },

    onLoad: function () {
      common.getLocation({
        success: (res) => {
          this.getRequest(true)
        }
      })
    },

    onShow: function () {
      if (typeof this.getTabBar === 'function' && this.getTabBar()) {
        this.getTabBar().setData({
          selected: 1
        })
      }

      // 非第一次请求才需要做比较
      if (!common.isEmpty(this.pageLocation)) {
        if (common.getDistanceToMe(this.pageLocation.latitude, this.pageLocation.longitude) > 1) {
          // 定位离开了1km才强制刷新
          app.globalData.isTabbarPageRefresh['find'] = true
        }
      }
      // 查询有没有在其他页面的事件要求本页面更新
      if (app.globalData.isTabbarPageRefresh['find']) {
        wx.pageScrollTo({
          scrollTop: 0,
          duration: 0
        })
        this.getRequest(true)
        app.globalData.isTabbarPageRefresh['find'] = false
      }
    },

    getRequest: function (isRefresh) {
      let pageNum = isRefresh ? 0 : this.httpsData.nextPage
      this.pageLocation = { longitude: app.globalData.longitude, latitude: app.globalData.latitude }
      net.reqGet({
        url: 'record/list/filter',
        query: {
          pageNum: pageNum,
          lng: app.globalData.location.longitude,
          lat: app.globalData.location.latitude,
          distance: distanceType[this.distanceIndex].distance,
          type: sortType[this.sortIndex].type
        }
      }).then(data => {
        if (isRefresh) {
          wx.stopPullDownRefresh()
        }

        let records = isRefresh ? [] : this.recordList[0]

        if (data.data.total > 0) {
          records = records.concat(common.getRecordListFrom(data.data.list))
          this.httpsData = data.data
        } else if (this.distanceIndex !== 5) { // 无数据则选择全网
          this.distanceIndex = 5
          this.getRequest(true)
        }
        this.recordList.splice(0, 1, records)
      })
    },

    changeFilter: function (e) {
      const type = parseInt(e.target.dataset.type)
      switch (type) {
        case 0: {
          this.distanceIndex = e.detail.value
          wx.setStorageSync('find_distanceIndex', e.detail.value)
          wx.pageScrollTo({
            scrollTop: 0,
            duration: 0
          })
          this.getRequest(true)
          break
        }
        case 1: {
          this.sortIndex = e.detail.value
          wx.setStorageSync('find_sortIndex', e.detail.value)
          wx.pageScrollTo({
            scrollTop: 0,
            duration: 0
          })
          this.getRequest(true)
          break
        }
      }
    },

    clickToSwitch: function () {
      wx.switchTab({
        url: './release'
      })
    },
    clickToMapPage: function () {
      wx.navigateTo({
        url: './mapPage?pageType=find'
      })
    }
  })
</script>

<style >

  .container {} 

  .header{
    width: 100%;
    height: 80rpx;
    position: fixed;
    margin-top: 0; 
    z-index: 99999;

    opacity: 0.8;
    border-bottom: 1rpx solid #ccc;
  }

  .header_holder{
    width: 100%;
    height: 80rpx;
    background-color: transparent;
  }

  .picker_distance{
    position: absolute;
    top: 0;
    left: 100rpx;

    width: 160rpx;
    height: 60rpx;
  }

  .picker_sort{
    position: absolute;
    top: 0;
    left: 500rpx;

    width: 160rpx;
    height: 60rpx;
  }

  .picker_btn {
    width: 160rpx;
    height: 60rpx;
    padding: 0rpx;
    text-align: center;
    line-height: 50rpx;

    font-size: 28rpx;
    background-color: transparent;

    border-top-left-radius: 0rpx;
    border-top-right-radius: 0rpx;
    border-bottom-left-radius: 20rpx;
    border-bottom-right-radius: 20rpx;

    border-bottom: 1px solid #bbb;
  }
</style>

<script  type='application/json'>
  {
    "enablePullDownRefresh": true,
    "usingComponents": {
      "navigationBar": "../components/navigationBar"
    }
  }
</script>