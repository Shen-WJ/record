<template>
  <view class='container'>

    <view class="header">
      <picker class="picker_distance" range="{{distanceType}}" range-key="text" value="{{distanceIndex}}" bindchange="changeFilter" data-type="0">
        <button class="picker_btn" hover-class="touch_btn">{{distanceType[distanceIndex].text}}</button>
      </picker>
      <picker class="picker_sort" range="{{sortType}}" range-key="text" value="{{sortIndex}}" bindchange="changeFilter" data-type="1">
        <button class="picker_btn" hover-class="touch_btn">{{sortType[sortIndex].text}}</button>
      </picker>
    </view>
    <view class="header_holder"></view>

    <import src="../utils/recordItem.wxml"/>
    <import src="../utils/common.wxml"/>
    <view class="find">
      <template is="emptyView" data="{{isShow: !recordListRac[0].length, type:0}}"/>
      <block wx:for="{{recordListRac[0]}}" wx:key="{{item.recordId}}" wx:for-index="row">
      <template is="recordItem" data="{{record:item, rcdIndex:{section:0, row:row}, rcdType:1}}"/>
      </block>
    </view>
  </view>
</template>

<script>
  import { createPage } from '@mpxjs/core'
  import net from '../utils/net'
  const common = require('../utils/common.js')
  const app = getApp()

  const distanceType = [
    { text: '1km内', distance: 1 },
    { text: '5km内', distance: 5 },
    { text: '10km内', distance: 10 },
    { text: '15km内', distance: 15 },
    { text: '20km内', distance: 20 },
    { text: '全网', distance: -1 }
  ]
  const sortType = [
    { text: '最热', type: 3 },
    { text: '最新', type: 1 },
    { text: '最早', type: 2 }
  ]

  const getRequest = function (that, isRefresh) {
    let pageNum = isRefresh ? 0 : that.httpsData.nextPage

    net.reqGet({
      url: 'record/list/filter',
      query: {
        pageNum: pageNum,
        lng: app.globalData.location.longitude,
        lat: app.globalData.location.latitude,
        distance: distanceType[that.data.distanceIndex].distance,
        type: sortType[that.data.sortIndex].type
      }
    }).then(data => {
      if (isRefresh) {
        wx.stopPullDownRefresh()
      }

      let records = isRefresh ? [] : that.recordList[0]

      if (data.data.total > 0) {
        records = records.concat(common.getRecordListFrom(data.data.list))
        that.httpsData = data.data
      }

      that.recordList = [records, []]
    })
  }

  createPage({
    data: {
      recordList: [[], []],
      distanceType: distanceType,
      distanceIndex: 0,
      sortType: sortType,
      sortIndex: 0
    },

    computed: {
      recordListRac: function () {
        return this.recordList || [[], []]
      }
    },

    onShow: function () {
      let that = this

      common.getLocation({
        success: (res) => {
          if (!common.isEmpty(app.globalData.location)) {
            if (common.getKilometerDistance(res.latitude, res.longitude, app.globalData.location.latitude, app.globalData.location.longitude) > 1) {
              // 定位离开了1km才强制刷新
              app.globalData.isTabbarPageRefresh[1] = true
            }
          }

          if (app.globalData.isTabbarPageRefresh[1]) {
            wx.pageScrollTo({
              scrollTop: 0,
              duration: 0
            })
            getRequest(that, true)
            app.globalData.isTabbarPageRefresh[1] = false
          }
        }
      })
    },

    onReady: function () {
      common.getLocation({
        success: (res) => {
          getRequest(this, true)
        }
      })
    },

    onPullDownRefresh: function () {
      getRequest(this, true)
    },

    onReachBottom: function () {
      if (!common.isEmpty(this.httpsData) && this.httpsData.hasNextPage) {
        getRequest(this, false)
      }
    },

    onShareAppMessage: function (res) {
      if (res.from === 'button') {
        const record = this.getRecord(res.target.dataset.index)
        const title = common.isEmpty(record.content) ? (record.nickname + '在' + record.location + '说') : record.content
        return {
          title: title,
          path: '/pages/recordDetail/recordDetail?recordId=' + record.recordId
        }
      } else {
        return {
          title: '了解身边的过去，记录过去的身边',
          path: '/pages/find/find'
        }
      }
    },

    changeFilter: function (e) {
      const type = parseInt(e.target.dataset.type)
      switch (type) {
        case 0: {
          this.setData({
            distanceIndex: e.detail.value
          }, (res) => {
            wx.pageScrollTo({
              scrollTop: 0,
              duration: 0
            })
            getRequest(this, true)
          })
          break
        }
        case 1: {
          this.setData({
            sortIndex: e.detail.value
          }, (res) => {
            wx.pageScrollTo({
              scrollTop: 0,
              duration: 0
            })
            getRequest(this, true)
          })
          break
        }
      }
    },

    clickToDetail: function (e) {
      const index = e.currentTarget.dataset.index
      const record = this.getRecord(index)

      wx.navigateTo({
        url: './recordDetail?recordId=' + record.recordId + '&section=' + index.section + '&row=' + index.row
      })
    },

    clickLike: function (e) {
      common.clickLike({
        index: e.currentTarget.dataset.index,
        that: this
      })
    },

    clickFavorites: function (e) {
      common.clickFavorites({
        index: e.currentTarget.dataset.index,
        that: this
      })
    },

    clickShare: function (e) {
      console.log('clickShare')
      if (!((typeof wx.canIUse === 'function') && wx.canIUse('button.open-type.share'))) {
        wx.showModal({
          title: '当前版本不支持转发按钮',
          content: '请升级至最新版本微信客户端',
          showCancel: false
        })
      }
    },

    previewImage: function (e) {
      const current = e.target.dataset.src
      const record = this.getRecord(e.target.dataset.index)
      console.log(e)
      wx.previewImage({
        current,
        urls: record.imageList
      })
    },

    clickToSwitch: function () {
      wx.switchTab({
        url: './release'
      })
    },

    clickToMap: function (e) {
      const index = e.currentTarget.dataset.index
      let record = this.getRecord(index)

      wx.openLocation({
        latitude: record.lat,
        longitude: record.lng
      })
    },

    getRecord: function (index) {
      return this.recordList[index.section][index.row]
    },
    changeRecord: function (index, record) {
      this.recordList[index.section].splice(index.row, 1, record)
    },

    // 0点赞，1收藏
    changeStatus: function (type, index) {
      common.changeStatus({
        type,
        index,
        that: this
      })
    }
  })
</script>

<style >

  .container {} 

  .header{
    width: 100%;
    height: 80rpx;
    position: fixed;
    top: 0; 
    margin-top: 0; 
    z-index: 99999;

    background-color: #fff;
    opacity: 0.8;
    border-bottom: 1rpx solid #ccc;
  }

  .header_holder{
    width: 100%;
    height: 80rpx;
    background-color: transparent;
  }

  .picker_distance{
    position: absolute;
    top: 0;
    left: 100rpx;

    width: 160rpx;
    height: 60rpx;
  }

  .picker_sort{
    position: absolute;
    top: 0;
    left: 500rpx;

    width: 160rpx;
    height: 60rpx;
  }

  .picker_btn {
    width: 160rpx;
    height: 60rpx;
    padding: 0rpx;
    text-align: center;
    line-height: 50rpx;

    font-size: 28rpx;
    color: #6a6a6a;
    background-color: transparent;

    border-top-left-radius: 0rpx;
    border-top-right-radius: 0rpx;
    border-bottom-left-radius: 20rpx;
    border-bottom-right-radius: 20rpx;

    border-bottom: 1px solid #bbb;
  }

  .touch_btn {
    background-color: #ddd;
  }
</style>

<script  type='application/json'>
  {
    "enablePullDownRefresh": true,
    "usingComponents": {}
  }
</script>