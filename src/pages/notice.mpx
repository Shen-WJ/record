<template>
  <navigationBar pageName="通知消息"/>

  <view class="container">
    <view class="table">
      <view class="cell notice_cell">
        <view wx:if="{{!isReadLocalNotice}}" class="notice_cell_redDot"></view>
        <view class="notice_cell_title {{darkMode?'fontColorW0':'fontColorB0'}}">
          <text >给用户的第一封信</text><text class="notice_cell_tag">置顶</text>
        </view>
        <text class="notice_cell_time fontColorC0">2019-8-20</text>
        <text class="notice_cell_content {{darkMode?'fontColorW2':'fontColorB2'}}">欢迎来到这个与你有关的虚拟世界，可爱的陌生人。
        你现在在哪里呀？想些什么呢？我猜猜哈。
        你可能刚下高速、火车、飞机，亦或正准备离开一座美妙或简单的城。抵达时的满心期待，离开时的依依不舍，这样的感情，不记录下来，会很容易溜走的。以后你会忘记发现这座青石古桥时的欣喜，忘记曾在某个街角遇到可爱的流浪猫一家时融化的心，忘记在夏日最炎热的那个下午吹到的最凉爽的风吃过的最甜蜜的炒冰。
        那就记下来吧，给自己的回忆，也给后来的陌生人了解这里。</text>
      </view>

      <block wx:for="{{noticeList}}" wx:key="{{item.id}}">
        <view class="cell notice_cell">
          <view wx:if="{{!item.isRead}}" class="notice_cell_redDot"></view>
          <text class="notice_cell_title {{darkMode?'fontColorW0':'fontColorB0'}}">{{item.title}}</text>
          <text class="notice_cell_time fontColorC0">{{item.timeStr}}</text>
          <text class="notice_cell_content {{darkMode?'fontColorW2':'fontColorB2'}}">{{item.content}}</text>
        </view>
      </block>
    </view>
  </view>
</template>

<script>
  import { createPage } from '@mpxjs/core'
  import net from '../utils/net'
  import { storeMode } from '../stores/storeCommon'
  import { behaviorOnPage } from '../behavior/behaviorOnPage'

  const common = require('../utils/common.js')

  createPage({
    behaviors: [behaviorOnPage],
    data: {
      noticeList: [],
      isReadLocalNotice: false
    },
    computed: {
      ...storeMode.mapState(['darkMode'])
    },

    onLoad: function (options) {
      this.getRequest(this, true)
      this.isReadLocalNotice = wx.getStorageSync('isReadLocalNotice') || false
      wx.setStorageSync('isReadLocalNotice', true)
    },

    onUnload: function () {
      net.reqDelete({
        url: 'notice/read'
      })
    },

    getRequest: function (isRefresh) {
      let pageNum = isRefresh ? 0 : this.httpsData.nextPage
      net.reqGet({
        url: 'notice/list',
        query: {
          pageNum: pageNum
        }
      }).then(data => {
        let list = isRefresh ? [] : this.noticeList

        for (let i in data.data.list) {
          let item = data.data.list[i]
          item['timeStr'] = common.timeToStr(item.time)
          list.push(item)
        }
        this.httpsData = data.data
        this.noticeList = list
      })
    }
  })
</script>

<style >

  .container {} 
  .notice_table {
  }
  .notice_cell {
    position: relative;
  }

  .notice_cell_redDot {
    position: absolute;
    top: 10rpx;
    left: 10rpx;
    background-color: red;
    height: 16rpx;
    width: 16rpx;
    border-radius: 50%;
  }
  .notice_cell_title {
    font-size: 32rpx;
  }
  .notice_cell_tag {
    padding: 0 10rpx;
    font-size: 24rpx;
    color: #fff;
    background-color: rgb(21, 224, 140);
    border-radius: 10rpx;
  }
  .notice_cell_time {
    margin-top: 10rpx;
    display: block;
    font-size: 26rpx;
  }
  .notice_cell_content {
    margin-top: 10rpx;
    display: block;
    font-size: 30rpx;
  }
</style>

<script  type='application/json'>
  {
    "usingComponents": {
      "navigationBar": "../components/navigationBar"
    }
  }
</script>