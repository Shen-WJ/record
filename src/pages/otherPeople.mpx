<template>
  <import src="../utils/personalPage.wxml"/>

  <navigationBar showThemeBgColor="{{true}}" pageName="{{otherNickname}}"/>
    <template is="personalPage" data="{{pageType:pageType, darkMode:darkMode, tabBarBottom:tabBarBottom,
      categoryMenu:categoryMenu, categoryData:categoryData, isTabFixed:isTabFixed, containerAni:containerAni,
      recordListH:recordListH, recordList:recordList, recordsTotal:recordsTotal,
      dailyRecordList:dailyRecordList,
      animationsText:animationsText, animations:animations,
      isShowDialog:isShowDialog, isFollowed:otherIsFollowed, isShowFollowBtn:isShowFollowBtn,
      followCount:otherFollowCount, followedCount:otherFollowedCount,
      signature:otherSignature, headUrl:otherHeadUrl, nickname:otherNickname, genderImg:genderImg}}">
    </template>
</template>

<script>
  import { createPage } from '@mpxjs/core'
  import { behaviorOnPeople } from '../behavior/behaviorOnPeople'
  import { storeMode } from '../stores/storeCommon'
  import net from '../utils/net'

  const common = require('../utils/common.js')
  const app = getApp()

  createPage({
    behaviors: [behaviorOnPeople],
    data: {
      pageType: 'others',

      otherNickname: '',
      otherSex: 0,
      otherHeadUrl: '',
      otherSignature: '',
      otherFollowedCount: 0,
      otherFollowCount: 0,
      otherIsFollowed: false,

      recordsTotal: 0,
      recordList: [],
      recordListH: [],

      animations: [],
      animationsText: ['分', '享', '生', '活'],

      isShowDialog: false,
      isShowFollowBtn: false,

      tabBarBottom: app.globalData.tabBarBottom,
      dailyRecordList: [],

      categoryMenu: ['他的点迹', '他的全世界'],
      categoryData: [
        {
          requesting: false, // 请求中，显示加载动画
          end: false, // 已加载全部，不再触发上拉加载
          emptyShow: false, // 是否展示空视图，find页面不需要
          total: 0
        },
        {
          requesting: false,
          end: false,
          emptyShow: false,
          total: 0
        }
      ],
      isTabFixed: false,
      containerAni: {}
    },
    computed: {
      genderImg: function () {
        return require('../image/icon/gender' + (this.otherSex || '0') + '.png')
      },
      ...storeMode.mapState(['darkMode'])
    },
    onShow () {
    },
    getRequest: function (isRefresh) {
      if (isRefresh && this.categoryCur === 0) {
        net.reqGet({
          url: 'user/info/other',
          query: {
            otherUserId: this.otherUserId
          }
        }).then(data => {
          this.otherSex = data.data.sex
          this.otherNickname = data.data.nickname
          this.otherHeadUrl = data.data.headUrl
          this.otherSignature = data.data.signature || '暂无简介'
          this.otherFollowedCount = data.data.followedCount
          this.otherFollowCount = data.data.followCount || 0
          this.otherIsFollowed = data.data.follow
        })
      }
      this.changeCategoryData(true)
      if (this.categoryCur === 0) {
        let pageNum = isRefresh ? 0 : this.httpsData[0].nextPage
        net.reqGet({
          url: 'record/list/other',
          query: {
            otherUserId: this.otherUserId,
            pageNum: pageNum
          }
        }).then(data => {
          if (isRefresh) {
            wx.stopPullDownRefresh()
            this.recordsTotal = data.data.total
          }

          let records = isRefresh ? [] : this.data.recordList
          records = records.concat(common.getRecordListFrom(data.data.list))
          this.httpsData[0] = data.data
          this.recordList = records
          this.$nextTick(() => {
            const query = wx.createSelectorQuery().in(this)
            query.selectAll('.record_item').boundingClientRect((rect) => {
              let recordsH = []
              for (let i = 0; i < rect.length; i++) {
                recordsH.push(rect[i].height - 30)
              }
              this.recordListH = recordsH
            }).exec()
          })
          this.changeCategoryData(false, !data.data.hasNextPage, records.length)
        })
      } else if (this.categoryCur === 1) {
        let pageNum = isRefresh ? 0 : this.httpsData[1].nextPage
        net.reqGet({
          url: 'dailyRecord/info/listByOther',
          query: {
            otherUserId: this.otherUserId,
            pageNum: pageNum
          }
        }).then(data => {
          let dailyRecords = isRefresh ? [] : this.dailyRecordList
          this.httpsData[1] = data.data
          this.dailyRecordList = dailyRecords.concat(data.data.list)
          this.changeCategoryData(false, !data.data.hasNextPage, data.data.total, data.data.total === 0)
        })
      }
    }
  })
</script>

<style>
  @import '../utils/personalStyle.wxss';
</style>

<script  type='application/json' lang='json'>
  {
    "disableScroll": true,
    "usingComponents": {
      "dialog": "../components/dialog",
      "navigationBar": "../components/navigationBar",
      "swipeList": "../components/swipeList"
    }
  }
</script>