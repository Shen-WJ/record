<template>
  <navigationBar onlyShowIcon="{{true}}"/>
  <view class='container'>
    <customMap wx:if="{{isShowMap}}" id="customMap" mapH="{{mapH}}"
      showLocation="{{showLocation}}" latitude="{{firstLatitude}}" longitude="{{firstLongitude}}"
      enableScroll="{{enableScroll}}"
      markers="{{markers}}" polyline="{{polyline}}" includePoints="{{includePoints}}" circles="{{circles}}"
      bindregionchange="regionChange">
    </customMap>
    <cover-view wx:if="{{isShowMapTip}}" class="map_tip" style="top:{{navH}}px">
      <cover-view class="map_tip_content {{darkMode?'bgColorB0 fontColorW1':'bgColorW0 fontColorB1'}}">{{mapTip}}</cover-view>
      <cover-view class="map_tip_close {{darkMode?'bgColorB0 fontColorW1':'bgColorW0 fontColorB1'}}" catchtap='clickMapTipClose'>×</cover-view>
    </cover-view>
    <view class="pickerDate {{darkMode?'bgColorB0 fontColorW1':'bgColorW0 fontColorB1'}} {{isShowPickerDate?'pickerDate_show':''}}">
      <text>选择：从  </text>
      <picker class="{{darkMode?'map_menu_borderB':'map_menu_borderW'}}" mode="date" value="{{startDate}}" start="2019-01-01" end="2029-01-01" bindchange="changeDate" data-type="start">
        <view>{{startDate}}</view>
      </picker>
      <text>  到  </text>
      <picker class="{{darkMode?'map_menu_borderB':'map_menu_borderW'}}" mode="date" value="{{endDate}}" start="2019-01-01" end="2029-01-01" bindchange="changeDate" data-type="end">
        <view>{{endDate}}</view>
      </picker>
      <button catchtap="pickerDateConfirm">完成</button>
    </view>
    <cover-view wx:if="{{isShowMenu}}" class="map_menu {{darkMode?'bgColorB0 fontColorW1':'bgColorW0 fontColorB1'}}">
      <cover-view class="map_menu_tip">筛选以下时间段的内容：</cover-view>
      <cover-view wx:for="{{menu}}" wx:key="index" class="map_menu_select {{darkMode?'map_menu_borderB':'map_menu_borderW'}} {{index===selected?'selected':''}}" catchtap="clickMenu" data-index="{{index}}">{{index===selected?'■':'□'}}{{item}}</cover-view>
      <button class="map_menu_share" open-type="share">分享</button>
    </cover-view>
    <!--<canvas canvas-id='canvasSave' class="canvas"></canvas>
      保存图片 -->
  </view>
</template>

<script>
  import { createPage } from '@mpxjs/core'
  import net from '../utils/net'
  import { storeMode } from '../stores/storeCommon'
  import { storeUser } from '../stores/storeUser'

  const app = getApp()
  const common = require('../utils/common.js')
  const tipList = ['只能放大缩小，不能拖动哦(去’发现‘页面，玩转可划动的地图)。', '拖动以查看其他地区的内容吧！', '点击底部按钮，看看别的时间段的轨迹吧！']
  // 请求在这一层做，下一层只做数据展示和点击响应
  createPage({
    data: {
      mapH: app.globalData.windowHeight,
      showLocation: true,
      firstLatitude: app.globalData.location.latitude,
      firstLongitude: app.globalData.location.longitude,
      enableScroll: true,
      markers: [], // 标记点
      polyline: [],
      includePoints: [], // 缩放视野以包含所有给定的坐标点
      circles: [],

      menu: ['三天内', '一周内', '一个月内', '其他时间段'],
      isShowMenu: false,
      selected: 0,
      startDate: '2019-01-01',
      endDate: '2019-01-01',
      isShowPickerDate: false,

      isShowMap: false,
      mapTip: '',
      isShowMapTip: true,
      navH: app.globalData.navHeight
    },
    computed: {
      ...storeMode.mapState(['darkMode'])
    },
    onLoad (option) {
      this.pageType = option.pageType
      this.mapId = storeMode.state.darkMode ? 'map2' : 'map1'

      switch (this.pageType) {
        case 'person': {
          this.mapTip = tipList[2]
          this.showLocation = false
          this.isShowMenu = true
          this.otherUserId = parseInt(option.otherUserId) || 0
          this.personType = option.personType

          if (option.fromShare) {
            this.type = option.type || 1
            this.startDate = option.startDate || '2019-01-01'
            this.endDate = option.endDate || '2019-01-01'
            this.getRequsetOnOthers()
          } else {
            this.personType === 'others' ? this.getRequsetOnOthers(1) : this.getRequsetOnMe(1)
          }
          break
        }
        case 'locality': {
          this.mapTip = tipList[0]
          if (option.fromShare) {
            common.getLocation({
              success: res => {
                this.firstLatitude = app.globalData.location.latitude
                this.firstLongitude = app.globalData.location.longitude
                this.RegionDistance = 0
                this.enableScroll = false
                this.getRequestOnLocality(true)
              }
            })
          } else {
            this.firstLatitude = app.globalData.location.latitude
            this.firstLongitude = app.globalData.location.longitude
            this.RegionDistance = 0
            this.enableScroll = false
            this.getRequestOnLocality(true)
          }
          break
        }
        case 'find': {
          this.mapTip = tipList[1]
          if (option.fromShare) {
            this.latitude = parseFloat(option.latitude)
            this.longitude = parseFloat(option.longitude)
          } else {
            this.latitude = app.globalData.location.latitude
            this.longitude = app.globalData.location.longitude
          }
          this.getRequestOnFind(true)
          break
        }
      }
    },
    onShareAppMessage: function (res) {
      switch (this.pageType) {
        case 'person': {
          return {
            title: '来看看ta的',
            path: '/pages/mapPage?pageType=person&personType=others&fromShare=1&type=' + this.type + '&otherUserId=' + (this.otherUserId || storeUser.state.userId) + '&startDate=' + this.startDate + '&endDate' + this.endDate
          }
        }
        case 'locality': {
          return {
            title: '看看你附近有些啥好玩的',
            path: '/pages/mapPage?pageType=locality&fromShare=1'
          }
        }
        case 'find': {
          return {
            title: '快看，这个地方好好玩啊',
            path: '/pages/mapPage?pageType=find&fromShare=1&latitude=' + this.latitude + '&longitude=' + this.longitude
          }
        }
      }
    },
    getRequestOnLocality: function (isRefresh) {
      if (this.httpsData && !this.httpsData.hasNextPage) return

      let pageNum = isRefresh ? 0 : this.httpsData.nextPage
      net.reqGet({
        url: 'record/list/byLocation',
        query: {
          pageNum: pageNum,
          distance: 20,
          lng: this.firstLongitude,
          lat: this.firstLatitude
        }
      }).then(data => {
        this.createMap()

        this.originalRecords = isRefresh ? [] : this.originalRecords
        this.originalRecords = this.originalRecords.concat(data.data.list)
        this.httpsData = data.data

        let recordsOnMap = common.formatRecordsOnMap({
          list: this.originalRecords,
          isNeedInclude: false
        })
        this.markers = recordsOnMap.markers || []

        const lastOne = this.originalRecords[this.originalRecords.length - 1]
        if (data.data.total > 0) { // 有附近数据才画圆
          this.createCircles(
            {
              latitude: this.firstLatitude,
              longitude: this.firstLongitude
            }, {
              latitude: lastOne.lat,
              longitude: lastOne.lng
            }
          )
        }
        if (data.data.hasNextPage) {
          // 查看是否请求到了边界
          if (common.getDistanceToMe(lastOne.lat, lastOne.lng) < this.RegionDistance) {
            this.getRequestOnLocality(false)
          }
        } else {
          this.getHotList()
        }
      })
    },
    getHotList: function () {
      net.reqGet({
        url: 'record/list/hot',
        query: {
          size: 5
        }
      }).then(data => {
        if (this.httpsData.total <= 0) {
          wx.showToast({
            title: '附近空空的，去发现看看吧～OvO',
            icon: 'none',
            duration: 3000
          })
        } else {
          wx.showToast({
            title: '附近就这些啦，剩下的去发现看看吧～OvO',
            icon: 'none',
            duration: 4000
          })
        }

        this.originalRecords = this.originalRecords || []
        this.originalRecords = this.originalRecords.concat(data.data)

        let recordsOnMap = common.formatRecordsOnMap({
          list: this.originalRecords,
          isNeedInclude: false
        })
        this.markers = recordsOnMap.markers
      })
    },
    // 刷新即第一次请求的意思
    getRequestOnFind: function (isRefresh) {
      net.reqGet({
        url: 'record/list/byLocation', // 发现地图按距离拉取，所以10条附近的
        query: {
          pageNum: 0, // 发现地图只显示10条
          lng: this.longitude || app.globalData.location.longitude, // todo
          lat: this.latitude || app.globalData.location.latitude,
          distance: 100 // 100km,确保数据少时，能拉取到10条
        }
      }).then(data => {
        this.createMap()

        if (data.data.total <= 0) {
          this.markers = []
          wx.showToast({
            title: '这附近没有内容哦，换个地方试试吧～OvO',
            icon: 'none'
          })
          return
        }
        this.originalRecords = data.data.list
        this.httpsData = data.data

        let recordsOnMap = common.formatRecordsOnMap({
          list: this.originalRecords,
          isNeedInclude: true
        })
        this.markers = recordsOnMap.markers || []
        if (!this.isIncluded) { // 第一次进来，自动包括一次
          this.includePoints = recordsOnMap.points || []
          this.isIncluded = true
        }
        const lastOne = this.originalRecords[this.originalRecords.length - 1]
        this.createCircles(
          {
            latitude: this.latitude,
            longitude: this.longitude
          }, {
            latitude: lastOne.lat,
            longitude: lastOne.lng
          }
        )
      })
    },
    getRequsetOnMe (type) {
      this.type = type || this.type
      net.reqGet({
        url: 'record/gps/person',
        query: {
          type: this.type,
          startDate: this.startDate,
          endDate: this.endDate
        }
      }).then(data => {
        this.createMap()

        if (data.data.length === 0 || !data.data) {
          wx.showToast({
            title: '该时间段没发布内容呢，换个时间段吧～',
            icon: 'none'
          })
          this.firstLongitude = app.globalData.location.longitude
          this.firstLatitude = app.globalData.location.latitude
          return
        }
        this.originalRecords = []
        this.originalRecords = this.originalRecords.concat(data.data)
        let recordsOnMap = common.formatRecordsOnMap({
          list: this.originalRecords,
          isNeedLine: true,
          isNeedInclude: true
        })
        this.markers = recordsOnMap.markers
        this.polyline = [
          {
            points: recordsOnMap.points,
            color: '#2ab3f3',
            width: 2,
            arrowLine: true,
            borderColor: '#000'
          }
        ]
        this.includePoints = recordsOnMap.points
      })
    },
    getRequsetOnOthers (type) {
      this.type = type || this.type
      net.reqGet({
        url: 'record/gps/other',
        query: {
          otherUserId: this.otherUserId,
          type: this.type,
          startDate: this.startDate,
          endDate: this.endDate
        }
      }).then(data => {
        this.createMap()

        if (data.data.length === 0 || !data.data) {
          wx.showToast({
            title: '该时间段没发布内容呢，换个时间段吧～',
            icon: 'none'
          })
          this.firstLongitude = app.globalData.location.longitude
          this.firstLatitude = app.globalData.location.latitude
          return
        }
        this.originalRecords = []
        this.originalRecords = this.originalRecords.concat(data.data)
        let recordsOnMap = common.formatRecordsOnMap({
          list: this.originalRecords,
          isNeedLine: true,
          isNeedInclude: true
        })
        this.markers = recordsOnMap.markers
        this.polyline = [
          {
            points: recordsOnMap.points,
            color: '#2ab3f3',
            width: 2,
            arrowLine: true,
            borderColor: '#000'
          }
        ]
        this.includePoints = recordsOnMap.points
      })
    },
    createMap () {
      if (!this.isMapHasShowed) {
        this.isMapHasShowed = true
        this.setData({
          isShowMap: true
        }, res => {
          this.customMap = this.selectComponent('#customMap')
          // warning: 这里有个风险，可能includePoints与它产生冲突，期望是此处先执行然后是includePoints，理论也是如此
          wx.createMapContext(this.mapId, this.customMap).moveToLocation()
        })
      }
    },
    createCircles (centerPoi, borderPoi) {
      const radius = common.getKmDistanceFromPoi(centerPoi, borderPoi)
      this.circles = [{
        latitude: centerPoi.latitude,
        longitude: centerPoi.longitude,
        fillColor: '#2ab3f322',
        color: '#0498fa',
        radius: radius * 1000 + 100,
        strokeWidth: 2
      }]
    },
    regionChange (e) {
      const change = e.detail
      if (change.type === 'end') {
        if (change.causedBy === 'drag' && this.pageType === 'find') { // 发现页拖拽
          wx.createMapContext(this.mapId, this.customMap).getCenterLocation({
            success: (ctrLoc) => {
              if (this.longitude !== ctrLoc.longitude || this.latitude !== ctrLoc.latitude) {
                if (this.timer) clearTimeout(this.timer)
                this.timer = setTimeout(res => {
                  console.log('this.timer: ~~~', this.timer)
                  clearTimeout(this.timer)
                  this.longitude = ctrLoc.longitude
                  this.latitude = ctrLoc.latitude
                  this.getRequestOnFind(true)
                }, 700)
              }
            }
          })
        } else if (change.causedBy === 'scale' && this.pageType === 'locality') { // 附近页视野放缩
          wx.createMapContext(this.mapId, this.customMap).getRegion({
            success: (region) => {
              this.RegionDistance = common.getDistanceToMe(region.southwest.latitude, region.southwest.longitude)
              if (this.httpsData.hasNextPage || !this.httpsData) {
                // 查看是否有下一页
                const lastOne = this.originalRecords[this.originalRecords.length - 1]
                if (common.getDistanceToMe(lastOne.lat, lastOne.lng) < this.RegionDistance) {
                  // 有下一页，且当前视野增加，才开启请求倒计时
                  if (this.timer) clearTimeout(this.timer)
                  this.timer = setTimeout(res => {
                    console.log('this.timer: ~~~', this.timer)
                    clearTimeout(this.timer)
                    this.getRequestOnLocality(false)
                  }, 700)
                }
              }
            }
          })
        }
      }
    },
    clickMenu (e) {
      let index = e.currentTarget.dataset.index
      switch (index) {
        case 0:
        case 1:
        case 2: {
          this.isShowPickerDate = false

          if (this.selected === index) return

          this.selected = index
          if (this.personType === 'me') {
            this.getRequsetOnMe(++index)
          } else {
            this.getRequsetOnOthers(++index)
          }
          break
        }
        case 3: {
          this.isShowPickerDate = !this.isShowPickerDate
        }
      }
    },
    changeDate (e) {
      console.log(e)
      if (e.currentTarget.dataset.type === 'start') {
        this.startDate = e.detail.value
      } else if (e.currentTarget.dataset.type === 'end') {
        this.endDate = e.detail.value
      }
    },
    pickerDateConfirm () {
      this.selected = 3
      if (this.personType === 'me') {
        this.getRequsetOnMe(4)
      } else {
        this.getRequsetOnOthers(4)
      }
    },
    clickMapTipClose () {
      this.isShowMapTip = false
    },
    saveImg (e) {
      console.log(e)
      var context = wx.createCanvasContext('canvasSave')
      context.setStrokeStyle('#00ff00')
      context.setLineWidth(5)
      context.rect(0, 0, app.globalData.windowWidth, app.globalData.windowHeight)
      context.stroke()
      context.draw(false, res => {
        wx.canvasToTempFilePath({
          canvasId: 'canvasSave',
          success: (res) => {
            console.log(res)
            wx.saveImageToPhotosAlbum({
              filePath: res.tempFilePath,
              success: (res) => {
                console.log(res)
              },
              fail: (err) => {
                console.log(err)
              }
            })
          }
        })
      })
    }
  })
</script>

<style>
  .container {}
  .custom_map {
    width: 750rpx;
  }
  .map_tip {
    position: fixed;
    left: 0;
    width: 750rpx;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .map_tip_content {
    opacity: 0.8;
    font-size: 20rpx;
    padding: 3rpx 10rpx;
    border-radius: 20rpx;
  }
  .map_tip_close {
    opacity: 0.8;
    font-size: 20rpx;
    font-weight: bold;
    padding: 3rpx 15rpx;
    border-radius: 20rpx;
  }

  .map_menu {
    z-index: 1001;
    position: fixed;
    bottom: env(safe-area-inset-bottom);
    left: 30rpx;
    right: 30rpx;
    height: 96rpx;
    border-radius: 48rpx;
    padding: 0rpx 48rpx;
    opacity: 0.8;
    border: 2rpx solid #888;
  }
  .map_menu_tip {
    font-size: 20rpx;
    margin: 5rpx 10rpx 10rpx;
  }
  .map_menu_select {
    display: inline-block;
    font-size: 22rpx;

    margin: 0rpx 5rpx 10rpx;
  }
  .pickerDate {
    z-index: 1000;
    position: absolute;
    bottom: 96rpx;
    left: 78rpx;
    margin-bottom: env(safe-area-inset-bottom);
    padding: 15rpx;
    border-radius: 10rpx;

    font-size: 22rpx;

    opacity: 0;
    transform: translateY(100%);
    transition: .3s;
  }
  .pickerDate_show {
    opacity: 1;
    transform: translateY(0%);
  }
  .pickerDate picker {
    display: inline-block;
  }
  .pickerDate button {
    background-color: #2ab3f3;
    color: #fff;
    font-size: 22rpx;
    line-height: 36rpx;
    height: 36rpx;
    width: 100rpx;
    border-radius: 5rpx;
    margin-top: 15rpx;
  }

  .map_menu_borderB {
    border-radius: 5rpx;
    padding: 3rpx 7rpx;
    border: 2rpx solid #ccc;
  }
  .map_menu_borderW {
    border-radius: 5rpx;
    padding: 3rpx 7rpx;
    border: 2rpx solid #555;
  }
  .selected {
    border: 2rpx solid #2ab3f3;
    color: #2ab3f3;
  }
  .map_menu_share {
    position: absolute;
    top: 0;
    right: 0;
    background-color: #2ab3f3;
    color: #fff;
    line-height:96rpx;
    height: 96rpx;
    width: 102rpx;
  }
  .canvas {
    position: fixed;
    width: 750rpx;
    height: 1000px;
    top: 100%;
    left: 100%;
    overflow: hidden; 
  }
</style>

<script  type='application/json' lang='json'>
  {
    "usingComponents": {
      "navigationBar": "../components/navigationBar",
      "customMap": "../components/customMap"
    }
  }
</script>

