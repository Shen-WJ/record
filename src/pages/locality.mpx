<template>
  <navigationBar pageName="点迹" showBackIcon="{{false}}"/>
  <view class="container">
  
    <import src="../utils/recordItem.wxml"/>
    <import src="../utils/common.wxml"/>
    <view class="locality">
    <block wx:for="{{sections}}" wx:for-item="sectionName" wx:for-index="section" wx:key="{{sectionName}}">
      <!-- section0即使为空也要显示 -->
      <block wx:if="{{recordList[section].length || section==0}}">
        <view class="section_header {{darkMode?'bgColorB1 fontColorW1':'bgColorW1 fontColorB1'}}">{{sectionName}}</view>
        <template is="emptyView" data="{{isShow: (!recordList[0].length && section==0), type:0}}"/>
        <block wx:for="{{recordList[section]}}" wx:key="recordId" wx:for-index="row">
          <template is="recordItem" data="{{record:item, rcdIndex:{section:section, row:row}, rcdType:1, darkMode:darkMode}}"/>
        </block>
      </block>
    </block>

    <template is="emptyView" data="{{isShow: isReachBottom, type: 1, textArr:['已经到底啦！去','发现','查看更多内容吧～0v0']}}"/>
    </view>
  </view>
  <view class="bottomHolder"/>
</template>

<script>
  import { createPage } from '@mpxjs/core'
  import net from '../utils/net'
  import { storeMode } from '../stores/storeCommon'
  import { behaviorOnRecord } from '../behavior/behaviorOnRecord'
  import { behaviorOnPage } from '../behavior/behaviorOnPage'

  const common = require('../utils/common.js')
  const app = getApp()

  var count = 0
  createPage({
    behaviors: [behaviorOnRecord, behaviorOnPage],
    data: {
      recordList: [[], []],
      sections: ['附近', '全网热说'],
      scrollTop: 0,
      isReachBottom: false,
      pageLocation: {} // 这是对应页面“上一次”做数据请求的定位记录，不做任何其他用途
    },

    computed: {
      ...storeMode.mapState(['darkMode'])
    },

    onLoad: function (options) {
      common.getLocation({
        success: (res) => {
          this.getRequest(true)
        }
      })

      net.reqGet({
        url: 'notice/count'
      }).then(data => {
        if (data.data > 0 || !wx.getStorageSync('isReadLocalNotice')) {
          wx.showTabBarRedDot({
            index: 3
          })
        }
      })

      var timer = setInterval(() => {
        common.getLocation()
        console.log('timer fire!!!', ++count)
      }, 30000)
    },

    onShow: function () {
      if (typeof this.getTabBar === 'function' && this.getTabBar()) {
        this.getTabBar().setData({
          selected: 0
        })
      }

      // 非第一次请求才需要做比较
      if (!common.isEmpty(this.pageLocation)) {
        if (common.getDistanceToMe(this.pageLocation.latitude, this.pageLocation.longitude) > 1) {
          // 定位离开了1km才强制刷新
          app.globalData.isTabbarPageRefresh['locality'] = true
        }
      }
      // 查询有没有在其他页面的事件要求本页面更新
      if (app.globalData.isTabbarPageRefresh['locality']) {
        wx.pageScrollTo({
          scrollTop: 0,
          duration: 0
        })
        this.getRequest(true)
        app.globalData.isTabbarPageRefresh['locality'] = false
      }
    },

    getRequest: function (isRefresh) {
      let pageNum = isRefresh ? 0 : this.httpsData.nextPage
      let distance = isRefresh ? -1 : this.distance
      // 用于记录“上一次”请求时的定位点
      this.pageLocation = { longitude: app.globalData.longitude, latitude: app.globalData.latitude }
      net.reqGet({
        url: 'record/list/byLocation',
        query: {
          pageNum: pageNum,
          distance: distance,
          lng: app.globalData.location.longitude,
          lat: app.globalData.location.latitude
        }
      }).then(data => {
        if (isRefresh) {
          wx.stopPullDownRefresh()
          this.distance = data.data.distance
        }

        let records = isRefresh ? [] : this.recordList[0]

        if (!data.data.hasNextPage) {
          this.getHotList()
        }
        if (data.data.total > 0) {
          records = records.concat(common.getRecordListFrom(data.data.list))
          this.httpsData = data.data
        }
        this.recordList.splice(0, 1, records)
      })
    },
    getHotList: function () {
      net.reqGet({
        url: 'record/list/hot',
        query: {
          size: 5
        }
      }).then(data => {
        let hotList = []
        hotList = hotList.concat(common.getRecordListFrom(data.data))
        this.recordList.splice(1, 1, hotList)

        this.isReachBottom = true
      })
    },

    clickToSwitch: function (e) {
      let type = parseInt(e.target.dataset.type)
      if (type === 0) {
        wx.switchTab({
          url: './release'
        })
      } else {
        wx.switchTab({
          url: './find'
        })
      }
    }
  })
</script>

<style >
  .container {
  }
  .locality {
    width: 750rpx;
  }

  .section_header{
    padding:0 20rpx;
    font-size: 36rpx;
    font-weight: bold;
    line-height: 70rpx;
    height: 70rpx;
    width: 710rpx;
  }
</style>

<script  type='application/json'>
  {
    "enablePullDownRefresh": true,
    "usingComponents": {
      "navigationBar": "../components/navigationBar"
    }
  }
</script>