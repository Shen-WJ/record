<template>
  <navigationBar pageName="点迹" showBackIcon="{{false}}"/>
  <view class="container {{darkMode?'darkMode':''}}">
  
    <import src="../utils/recordItem.wxml"/>
    <import src="../utils/common.wxml"/>
    <view class="locality">
    <block wx:for="{{sections}}" wx:for-item="sectionName" wx:for-index="section" wx:key="{{sectionName}}">
      <!-- section0即使为空也要显示 -->
      <block wx:if="{{recordListRac[section].length || section==0}}">
        <view class="section_header {{darkMode?'bgColorB0 fontColorW1':'bgColorW0 fontColorB1'}}">{{sectionName}}</view>
        <template is="emptyView" data="{{isShow: (!recordListRac[0].length && section==0), type:0}}"/>
        <block wx:for="{{recordListRac[section]}}" wx:key="{{item.recordId}}" wx:for-index="row">
        <template is="recordItem" data="{{record:item, rcdIndex:{section:section, row:row}, rcdType:1, darkMode:darkMode}}"/>
        </block>
      </block>
    </block>

    <template is="emptyView" data="{{isShow: isReachBottom, type: 1, textArr:['已经到底啦！去','发现','查看更多内容吧～0v0']}}"/>
    </view>
  </view>
  <view class="bottomHolder"/>
</template>

<script>
  import { createPage } from '@mpxjs/core'
  import net from '../utils/net'
  import { storeMode } from '../stores/storeCommon'
  import { behaviorOnRecord } from '../behavior/behaviorOnRecord'

  const common = require('../utils/common.js')
  const app = getApp()


  const getHotList = function (that) {
    net.reqGet({
      url: 'record/list/hot',
      query: {
        size: 5
      }
    }).then(data => {
      let hotList = []
      hotList = hotList.concat(common.getRecordListFrom(data.data))
      that.recordList.splice(1, 1, hotList)

      that.setData({
        isReachBottom: true
      })
    })
  }

  createPage({
    behaviors: [behaviorOnRecord],
    data: {
      recordList: [[], []],
      sections: ['附近', '全网热说'],
      scrollTop: 0,
      isReachBottom: false
    },

    computed: {
      recordListRac: function () {
        return this.recordList || [[], []]
      },
      ...storeMode.mapState(['darkMode'])
    },

    onLoad: function (options) {
      net.reqGet({
        url: 'notice/count'
      }).then(data => {
        if (data.data > 0 || !wx.getStorageSync('isReadLocalNotice')) {
          wx.showTabBarRedDot({
            index: 3
          })
        }
      })
    },

    onShow: function () {
      if (typeof this.getTabBar === 'function' && this.getTabBar()) {
        this.getTabBar().setData({
          selected: 0
        })
      }

      common.getLocation({
        success: (res) => {
          if (!common.isEmpty(app.globalData.location)) {
            if (common.getKilometerDistance(res.latitude, res.longitude, app.globalData.location.latitude, app.globalData.location.longitude) > 1) {
              // 定位离开了1km才强制刷新
              app.globalData.isTabbarPageRefresh[0] = true
            }
          }

          if (app.globalData.isTabbarPageRefresh[0]) {
            wx.pageScrollTo({
              scrollTop: 0,
              duration: 0
            })
            this.getRequest(true)
            app.globalData.isTabbarPageRefresh[0] = false
          }
        }
      })
    },

    onReady: function () {
      common.getLocation({
        success: (res) => {
          this.getRequest(true)
        }
      })
    },

    getRequest: function (isRefresh) {
      let pageNum = isRefresh ? 0 : this.httpsData.nextPage
      let distance = isRefresh ? -1 : this.distance
      net.reqGet({
        url: 'record/list/byLocation',
        query: {
          pageNum: pageNum,
          distance: distance,
          lng: app.globalData.location.longitude,
          lat: app.globalData.location.latitude
        }
      }).then(data => {
        if (isRefresh) {
          wx.stopPullDownRefresh()
          this.distance = data.data.distance
        }

        let records = isRefresh ? [] : this.recordList[0]

        if (!data.data.hasNextPage) {
          getHotList(this)
        }
        if (data.data.total > 0) {
          records = records.concat(common.getRecordListFrom(data.data.list))
          this.httpsData = data.data
        }
        this.recordList = [records, []]
      })
    },

    clickToSwitch: function (e) {
      console.log(e)
      let type = parseInt(e.target.dataset.type)
      if (type === 0) {
        wx.switchTab({
          url: './release'
        })
      } else {
        wx.switchTab({
          url: './find'
        })
      }
    }
  })
</script>

<style >
  .container {
  }
  .locality {
    width: 750rpx;
  }

  .section_header{
    padding:0 20rpx;
    font-size: 36rpx;
    font-weight: bold;
    line-height: 70rpx;
    height: 70rpx;
    width: 710rpx;
  }
</style>

<script  type='application/json'>
  {
    "enablePullDownRefresh": true,
    "usingComponents": {
      "navigationBar": "../components/navigationBar"
    }
  }
</script>