<template>
  <view wx:if="{{!onlyShowIcon}}" class="navbar {{navBarClass}}" style='height:{{navH}}px'>
    <view wx:if="{{showBackIcon}}" class='navbar-icon'>
      <image class="navbar-icon-image" src='{{navBackIcon}}' mode='aspectFit' bindtap='navBack'></image>
      <view class="navbar-icon-view {{darkMode?'bgColorW0':'bgColorB0'}}"></view>
      <image class="navbar-icon-image" src='{{navHomeIcon}}' mode='aspectFit' bindtap='navHome'></image>
    </view>
    <view class="navbar-title {{darkMode?'fontColorW0':'fontColorB0'}}">
      {{pageName}}
    </view>
  </view>
  <cover-view wx:else class='navbar-icon' style="top:{{navH-5-34}}px">
    <cover-image wx:if="{{navBackIcon}}" class="navbar-icon-image" src='{{navBackIcon}}' mode='aspectFit' bindtap='navBack'></cover-image>
    <cover-view class="navbar-icon-view {{darkMode?'bgColorW0':'bgColorB0'}}"></cover-view>
    <cover-image wx:if="{{navHomeIcon}}" class="navbar-icon-image" src='{{navHomeIcon}}' mode='aspectFit' bindtap='navHome'></cover-image>
  </cover-view>
  <view wx:if="{{showHolder}}" class="navbar_holder" style="height:{{navH}}px"></view>
  <view class="coverPage {{darkMode?'darkMode':'dayMode'}}" style="{{showCoverImg?'opacity:'+opacity:''}}"/>
  <image wx:if="{{coverImg.length>0}}" class="coverImg" mode='aspectFill' src="{{coverImg}}"/>
</template>

<script>
  import { createComponent } from '@mpxjs/core'
  import { storeMode } from '../stores/storeCommon'

  const app = getApp()
  createComponent({
    options: {
      styleIsolation: 'shared'
    },
    properties: {
      pageName: {
        type: String,
        value: ' '
      },
      showBackIcon: {
        type: Boolean,
        value: true
      },
      showThemeBgColor: {
        type: Boolean,
        value: false
      },
      showHolder: {
        type: Boolean,
        value: true
      },
      onlyShowIcon: {
        type: Boolean,
        value: false
      },
      showCoverImg: {
        type: Boolean,
        value: true
      }
    },
    data: {
      navH: app.globalData.navHeight
    },
    computed: {
      ...storeMode.mapState(['darkMode', 'coverImg', 'opacity']),
      navBackIcon () {
        return require('../image/icon/nav_back' + (storeMode.state.darkMode ? 1 : 0) + '.png')
      },
      navHomeIcon () {
        return require('../image/icon/nav_home' + (storeMode.state.darkMode ? 1 : 0) + '.png')
      },
      navBarClass () {
        if (storeMode.state.darkMode) {
          return 'darkMode borderB'
        } else if (this.showThemeBgColor) {
          return 'themeMode'
        } else {
          return 'dayMode borderW'
        }
      }
    },
    methods: {
      navBack: function () {
        wx.navigateBack({
          delta: 1,
          fail: (res) => {
            console.log(res)
            this.navHome()
          }
        })
      },
      navHome: function () {
        wx.switchTab({
          url: './locality'
        })
      }
    }
  })
</script>

<style>
  .navbar {
    width: 100%;
    overflow: hidden;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 10000;
    flex-shrink: 0;
  }

  .borderB {
    border-bottom: 2rpx solid #444;
  }
  .borderW {
    border-bottom: 2rpx solid #ddd;
  }

  .navbar-title {
    width: 100%;
    height: 45px;
    line-height: 45px;
    text-align: center;
    position: absolute;
    bottom: 0;
    left: 0;
    z-index: 10;
    font-size: 16px;
    font-weight: bold;
  }

  .navbar-icon {
    position: absolute;
    bottom: 10rpx;
    left: 10rpx;
    height: 34px;
    box-sizing: border-box;
    display: flex;
    z-index: 20;
  }
  
  .navbar-icon-image {
    display: inline-block;
    overflow: hidden;
    width: 16px;
    height: 18px;
    padding: 8px 16px;
    text-align: center;
  }
  
  .navbar-icon-view {
    height: 18px;
    width: 1px;
    margin-top: 8px;
  }
  .coverPage {
    top: 0rpx;
    left: 0rpx;
    width: 100%;
    height: 100%;
    z-index: -1000;
    position: fixed;
  }
  .coverImg {
    top: 0rpx;
    left: 0rpx;
    width: 100%;
    height: 100%;
    z-index: -1001;
    position: fixed;
  }
</style>

<script type='application/json' lang='json'>
  {
    "component": true
  }
</script>

