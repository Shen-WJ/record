<template>
  <navigationBar showBackIcon="{{showBackIcon}}" showThemeBgColor="{{true}}"/>

  <view class="container">
    <view class="me_hd" bindtap="clickHead">
      <image class="me_hd_bg_img {{darkMode?'darkMode':'themeMode'}}" mode="aspectFill">
        <image class="me_hd_photo" mode="aspectFit" src="{{headUrl}}" catchtap="clickToSome" data-type="0"></image>
        <view class="me_hd_name me_hd_flex_group">
          <text class="me_hd_nameStr" catchtap="clickToSome" data-type="0">{{nickname}}</text>
          <image class="me_hd_gender" src="{{genderImg}}" mode="aspectFit" catchtap="clickToSome" data-type="0"></image>
        </view>
        <view class="me_hd_desc_follow me_hd_flex_group">
          <text class="me_hd_desc_following">关注：{{followCount}}</text>
          <view class="me_hd_desc_separate"/>
          <text class="me_hd_desc_followed">粉丝：{{followedCount}}</text>
        </view>
        <view class="me_hd_signature me_hd_flex_group">
          <text class="me_hd_desc_signature {{pageType === 'me'?'me_hd_desc_signature_gap':''}}" catchtap="clickToSome" data-type="0">{{signature}}</text>
          <image wx:if="{{pageType === 'me'}}" class="me_hd_edit" src="../image/icon/edit.png" mode="aspectFit" catchtap="clickToSome" data-type="0"></image>
        </view>
        <block wx:if="{{pageType === 'me'}}">
          <view class="me_hd_notice_redDot" wx:if="{{isShowNoticeRedDot}}"></view>
          <button class="me_hd_notice me_hd_btn" hover-class="me_hd_touch_btn" catchtap="clickToSome" data-type="1">通知 {{noticeCount}}</button>
          <button class="me_hd_favorites me_hd_btn" hover-class="me_hd_touch_btn" catchtap="clickToSome" data-type="2">收藏</button>
          <button class="me_hd_settings me_hd_btn" hover-class="me_hd_touch_btn" catchtap="clickToSome" data-type="3">设置</button>
        </block>
        <block wx:if="{{pageType === 'others'}}">
          <button wx:if="{{isShowFollowBtn}}" class="me_hd_follow me_hd_btn" hover-class="me_hd_touch_btn" catchtap="clickToSome" data-type="4">{{isFollowed?'取消关注':'关注'}}</button>
          <button class="me_hd_share me_hd_btn" hover-class="me_hd_touch_btn" open-type="share" id="shareOtherPeople">分享</button>
        </block>
        <block wx:for="{{animations}}" wx:key="{{index}}">
          <view class="me_hd_element{{index}}" animation="{{animations[index]}}">{{animationsText[index]}}</view>
        </block>
      </image>
    </view>

    <view class="me_bd_memory">
      <view class="position_icon_line">
        <image class="me_bd_memory_icon" mode="aspectFit" src="../image/icon/circle.png" />
        <view class="line2" style="height:10rpx;"></view>
      </view>
      <text class="{{darkMode?'fontColorW1':'fontColorB1'}}">{{recordsTotal}}个地点的记忆</text>
    </view>

    <import src="../utils/common.wxml"/>
    <import src="../utils/myRecord.wxml"/>
    <view class="me_template" wx:if="{{recordList.length<=0}}">
      <template is="emptyView" data="{{isShow: !recordList.length, type:0, textArr:['以下是自定义的一些点迹模版，快','发布','自己的点迹吧～0v0\\n发布后以下内容会消失']}}"/>
      <view class="me_template_bd">
        <template is="myRecord" data="{{recordList:templateList, recordListH:recordListH, darkMode:darkMode, rcdType:0}}" />
      </view>
      <view class="me_template_bd_cover" style="height:{{templateListH}}px" catchtap="templateCatch"></view>
      <template is="emptyView" data="{{isShow: !recordList.length, type:0, textArr:['以上是自定义的一些点迹模版，快','发布','自己的点迹吧～0v0\\n发布后以上内容会自动消失']}}"/>
    </view>

    <view class="me_bd" wx:if="{{recordList.length>0}}">
      <template is="myRecord" data="{{recordList:recordList, recordListH:recordListH, darkMode:darkMode, rcdType:pageType==='me'?0:1}}" />
    </view>

    <dialog isShow="{{isShowDialog}}" title="{{pageType==='me'?'获取信息':'关注需要昵称/头像'}}" content="{{pageType==='me'?'个人页面的展示需要昵称和头像。之后可以点击头像/昵称进行修改。':'你还没有昵称头像，关注不了哦OvO～快去授权吧！'}}" showCancel="{{false}}" confirmText="去授权" open_type="getUserInfo" bindSuccess='authorizeUserInfo'></dialog>
  </view>
  <view class="point themeMode" catchtap="clickToMap">地图</view>
  <view class="bottomHolder"/>
</template>

<script>
  import { createComponent } from '@mpxjs/core'
  import net from '../utils/net'
  import { storeMode, storeNotice } from '../stores/storeCommon'
  import { storeUser } from '../stores/storeUser'
  import { behaviorOnRecord } from '../behavior/behaviorOnRecord'

  const common = require('../utils/common.js')
  const app = getApp()

  let elements = [
    wx.createAnimation({ timingFunction: 'ease', duration: 1000 }),
    wx.createAnimation({ timingFunction: 'ease-in', duration: 1000 }),
    wx.createAnimation({ timingFunction: 'ease-in-out', duration: 1000 }),
    wx.createAnimation({ timingFunction: 'ease-out', duration: 1000 })
  ]
  let isAnimating = false

  const creattemplateList = function (that) {
    let templateList = []
    for (let i in templates) {
      templateList.push({
        content: templates[i].content,
        location: templates[i].location,
        distance: ' 1314km',
        isLiked: true,
        isFavorited: false,
        locStr: 'N:5°20′ E:13°14′',
        love: 666,
        timeStr: '以前'
      })
    }
    that.setData({
      templateList: templateList
    }, (res) => {
      const query = wx.createSelectorQuery().in(that)
      // 计算各个cell高度来确定线条长度
      query.selectAll('.record_item').boundingClientRect((rect) => {
        let recordsH = []
        for (let i = 0; i < rect.length; i++) {
          recordsH.push(rect[i].height - 30)
        }
        that.setData({
          recordListH: recordsH
        })
      }).exec()
      // 整个temp的高度，防止留白也防止被点击
      query.select('.me_template_bd').boundingClientRect((rect) => {
        that.setData({
          templateListH: rect.height
        })
      }).exec()
    })
  }

  const getRequestOnMe = function (that, isRefresh) {
    if (isRefresh) {
      net.reqGet({
        url: 'user/info'
      }).then(data => {
        storeUser.commit('updateUserInfo', {
          sex: data.data.sex,
          nickname: data.data.nickname,
          headUrl: data.data.headUrl
        })
        storeUser.commit('updateSignature', { signature: data.data.signature })
        storeUser.commit('updateFollowCount', {
          followCount: data.data.followCount,
          followedCount: data.data.followedCount
        })
      })

      net.reqGet({
        url: 'notice/count'
      }).then(data => {
        let count = data.data
        count += (!wx.getStorageSync('isReadLocalNotice') ? 1 : 0)
        if (count > 0) {
          storeNotice.commit('updateRedDots', {
            redDots: [0, 0, 0, 0, count]
          })
        }
        that.setData({
          noticeCount: (count === 0 ? '' : count.toString()),
          isShowNoticeRedDot: count > 0
        })
      })
    }

    let pageNum = isRefresh ? 0 : that.httpsData.nextPage
    net.reqGet({
      url: 'record/list/person',
      query: {
        pageNum: pageNum
      }
    }).then(data => {
      if (isRefresh) {
        wx.stopPullDownRefresh()
        that.setData({
          recordsTotal: data.data.total
        })
        if (data.data.total <= 0) {
          creattemplateList(that)
          return
        }
      }

      let records = isRefresh ? [] : that.data.recordList
      records = records.concat(common.getRecordListFrom(data.data.list))
      that.httpsData = data.data
      that.setData({
        recordList: records
      }, (res) => {
        const query = wx.createSelectorQuery().in(that)
        query.selectAll('.record_item').boundingClientRect((rect) => {
          let recordsH = []
          for (let i = 0; i < rect.length; i++) {
            recordsH.push(rect[i].height - 30)
          }
          that.setData({
            recordListH: recordsH
          })
        }).exec()
      })
    })
  }

  const getRequestOnOthers = function (that, isRefresh) {
    if (isRefresh) {
      net.reqGet({
        url: 'user/info/other',
        query: {
          otherUserId: that.data.otherUserId
        }
      }).then(data => {
        that.otherSex = data.data.sex
        that.otherNickname = data.data.nickname
        that.otherHeadUrl = data.data.headUrl
        that.otherSignature = data.data.signature || '暂无简介'
        that.otherFollowedCount = data.data.followedCount
        that.otherfollowCount = data.data.followCount || 0
        that.otherIsFollowed = data.data.follow
      })
    }

    let pageNum = isRefresh ? 0 : that.httpsData.nextPage
    net.reqGet({
      url: 'record/list/other',
      query: {
        otherUserId: that.data.otherUserId,
        pageNum: pageNum
      }
    }).then(data => {
      if (isRefresh) {
        wx.stopPullDownRefresh()
        that.setData({
          recordsTotal: data.data.total
        })
      }

      let records = isRefresh ? [] : that.data.recordList
      records = records.concat(common.getRecordListFrom(data.data.list))
      that.httpsData = data.data
      that.setData({
        recordList: records
      }, (res) => {
        const query = wx.createSelectorQuery().in(that)
        query.selectAll('.record_item').boundingClientRect((rect) => {
          let recordsH = []
          for (let i = 0; i < rect.length; i++) {
            recordsH.push(rect[i].height - 30)
          }
          that.setData({
            recordListH: recordsH
          })
        }).exec()
      })
    })
  }
  // 这是个失败的页面，太乱
  createComponent({
    behaviors: [behaviorOnRecord],
    options: {
      styleIsolation: 'shared'
    },
    properties: {
      pageType: {
        type: String,
        value: ''
      },
      otherUserId: {
        type: Number,
        value: 10001
      },
      showBackIcon: {
        type: Boolean,
        value: false
      }
    },
    data: {
      recordsTotal: 0,
      noticeCount: '',
      recordList: [],
      animations: [],
      animationsText: ['分', '享', '生', '活'],
      templateList: [],
      templateListH: 0,
      recordListH: [],
      isShowNoticeRedDot: false,
      isShowDialog: false,

      headGapHeight: app.globalData.statusBarHeight + 10,

      otherNickname: '',
      otherSex: 0,
      otherHeadUrl: '',
      otherSignature: '',
      otherFollowedCount: 0,
      otherfollowCount: 0,
      otherIsFollowed: false
    },
    computed: {
      genderImg: function () {
        return require('../image/icon/gender' + (storeUser.state.sex || '0') + '.png')
      },
      ...storeMode.mapState(['darkMode']),
      nickname () {
        return this.pageType === 'me' ? storeUser.state.nickname : this.otherNickname
      },
      sex () {
        return this.pageType === 'me' ? storeUser.state.sex : this.otherSex
      },
      headUrl () {
        return this.pageType === 'me' ? storeUser.state.headUrl : this.otherHeadUrl
      },
      signature () {
        return this.pageType === 'me' ? storeUser.state.signature : this.otherSignature
      },
      followedCount () {
        return this.pageType === 'me' ? storeUser.state.followedCount : this.otherFollowedCount
      },
      followCount () {
        return this.pageType === 'me' ? storeUser.state.followCount : this.otherfollowCount
      },
      isFollowed () {
        return this.otherIsFollowed
      },
      isShowFollowBtn () {
        return storeUser.state.userId !== this.otherUserId
      }
    },
    lifetimes: {
      attached: function () {
      },
      ready: function () {
      }
    },
    pageLifetimes: {
      show: function () {
        this.clickHead()

        if (this.pageType === 'me') {
          if (!storeUser.state.hasHadUserInfo) { // 无则判断授权
            wx.getSetting({
              success: (res) => {
                if (!res.authSetting['scope.userInfo']) { // 依旧没授权
                  this.setData({
                    isShowDialog: true
                  })
                } else { // 已经授权
                  this.setData({
                    isShowDialog: false
                  })
                }
              }
            })
          } else { // 在其他页面授权获得了信息，则消失
            this.setData({
              isShowDialog: false
            })
          }
        }
      }
    },
    methods: {
      getRequest ({ isRefresh }) {
        if (this.data.pageType === 'me') {
          getRequestOnMe(this, isRefresh)
        } else {
          getRequestOnOthers(this, isRefresh)
        }
      },
      // 个人信息，通知，收藏，设置，关注/取消关注
      clickToSome: function (e) {
        const type = parseInt(e.currentTarget.dataset.type)
        switch (type) {
          case 0: { // 个人信息
            if (this.data.pageType === 'me') {
              wx.navigateTo({
                url: './userInfo'
              })
            }
            break
          }
          case 1: { // 通知
            this.setData({
              noticeCount: '',
              isShowNoticeRedDot: false
            })
            storeNotice.commit('updateRedDots', {
              redDots: [0, 0, 0, 0, 0]
            })
            wx.navigateTo({
              url: './notice'
            })
            break
          }
          case 2: { // 收藏
            wx.navigateTo({
              url: './favorites'
            })
            break
          }
          case 3: { // 设置
            wx.navigateTo({
              url: './settings?pageType=settings'
            })
            break
          }
          case 4: { // 点击关注/取消关注
            if (storeUser.state.userId === this.data.otherUserId) return
            if (this.data.isFollowed) {
              net.reqPut({
                url: 'user/unfollow',
                body: {
                  followUserId: this.data.otherUserId
                }
              }).then(data => {
                this.otherIsFollowed = false
              })
            } else {
              if (!storeUser.state.hasHadUserInfo) {
                this.setData({
                  isShowDialog: true
                })
                return
              }
              net.reqPost({
                url: 'user/follow',
                body: {
                  followUserId: this.data.otherUserId
                }
              }).then(data => {
                this.otherIsFollowed = true
              })
            }
            break
          }
        }
      },

      clickHead (e) {
        if (isAnimating) return
        isAnimating = true
        let timer = setTimeout(() => {
          clearTimeout(timer)
          this.animationOnHead(0)
        }, 0)
        let timer1 = setTimeout(() => {
          clearTimeout(timer1)
          this.animationOnHead(1)
        }, 3000)
      },
      animationOnHead (type) {
        let exports = []
        if (type === 0) {
          for (let i = 0; i < elements.length; i++) {
            let animation = elements[i]
            switch (i) {
              case 0: {
                animation.left('0rpx').top('0rpx').step()
                break
              }
              case 1: {
                animation.left('650rpx').top('0rpx').step()
                break
              }
              case 2: {
                animation.left('0rpx').top('260rpx').step()
                break
              }
              case 3: {
                animation.left('650rpx').top('260rpx').step()
                break
              }
            }
            exports.push(animation.export())
          }
        } else {
          for (let i = 0; i < elements.length; i++) {
            let animation = elements[i]
            animation.left('325rpx').top('75rpx').step()
            exports.push(animation.export())
          }
          isAnimating = false
        }
        this.setData({
          animations: exports
        })
      },

      // 点击是否授权后触发
      authorizeUserInfo (e) {
        wx.getSetting({
          success: (res) => {
            if (!res.authSetting['scope.userInfo']) {
              if (this.pageType === 'me') {
                this.setData({
                  isShowDialog: true
                })
              } else {
                this.setData({
                  isShowDialog: false
                })
              }
            } else {
              this.setData({
                isShowDialog: false
              })
              common.updateUserInfo({
                userInfo: e.detail.detail.userInfo
              })
            }
          }
        })
      },

      clickMore: function (e) {
        const index = e.currentTarget.dataset.index
        let record = this.getRecord(index)
        let sheet = []
        const isAnonymous = record.isAnonymous
        if (isAnonymous) {
          sheet = ['取消匿名', '删除']
        } else {
          sheet = ['匿名', '删除']
        }
        wx.showActionSheet({
          itemList: sheet,
          success: res => {
            if (res.tapIndex === 0) {
              const status = (isAnonymous ? 0 : 1).toString()
              wx.showModal({
                title: `确认${(isAnonymous ? '取消' : '')}匿名？`,
                content: `点击以确认${(isAnonymous ? '取消' : '')}匿名`,
                confirmText: isAnonymous ? '取消匿名' : '开启匿名',
                confirmColor: '#d81e06',
                success: (res) => {
                  if (res.confirm) {
                    net.reqPut({
                      url: 'record/anonymous/status',
                      body: {
                        recordId: record.recordId,
                        status: status
                      }
                    }).then(data => {
                      this.changeStatus(2, index)
                    })
                  }
                }
              })
            } else if (res.tapIndex === 1) {
              wx.showModal({
                title: '确认删除？',
                content: '点击删除以删除此点迹',
                confirmText: '删除',
                confirmColor: '#d81e06',
                success: (res) => {
                  if (res.confirm) {
                    net.reqDelete({
                      url: 'record/info',
                      query: {
                        recordId: record.recordId
                      }
                    }).then(data => {
                      this.deleteRecord(index)
                    })
                  }
                }
              })
            }
          }
        })
      },

      clickToSwitch: function () {
        wx.switchTab({
          url: './release'
        })
      },

      getRecord: function (index) {
        return this.data.recordList[index]
      },
      changeRecord: function (index, record) {
        this.setData({
          [`recordList[${index}]`]: record
        })
      },
      deleteRecord: function (index) {
        let records = this.data.recordList
        records.splice(index, 1)
        this.setData({
          recordList: records
        })
      },

      // 0点赞，1收藏
      changeStatus: function (type, index) {
        let row = (typeof (index) === 'number') ? index : index.row
        if (type === 2) {
          let record = this.getRecord(row)
          record.isAnonymous = !record.isAnonymous
          this.changeRecord(row, record)
        } else {
          common.changeStatus({
            type,
            index: row,
            that: this
          })
        }
      },

      templateCatch: function () {
        // 仅为阻挡template上的点击操作，不做任何处理
      },
      clickToMap: function () {
        wx.navigateTo({
          url: './mapPage?personType='+this.pageType+'&otherUserId='+(this.data.otherUserId||0)
        })
      }
    }
  })

  var templates = [
    {
      content: '你好，北京。初来乍到，请多指教。',
      location: '北京南站'
    }, {
      content: '王小明到此一游',
      location: '八达岭长城'
    }, {
      content: '上周，我们就是在这里分的手。其实我当时就想质问你，为什么你个学摄影的，古道、西风、瘦马、小桥、流水拍得那么多，就是不拍人家！？',
      location: '我在天涯'
    }, {
      content: '大学时还在这里跟同学吃过好多好多好多次小炒，可惜现在换店了，唉。',
      location: '本部西门新莉小炒'
    }, {
      content: '8说了，我已经在这里等伞2小时33分25秒了。',
      location: 'XXX海底捞门口'
    }, {
      content: '苏州中心的大厅，真的好香啊。',
      location: '苏州中心'
    }, {
      content: '我走丢了，别问我在哪，总之快来找我，在线等，挺急的。',
      location: '记我走丢的第233个点'
    }, {
      content: '所以这里为什么叫王府井？王府的井咩？求告知',
      location: '王府井大街'
    }, {
      content: '这栋楼有点高，我刚数到30层就有事溜了，mark下，下次来再数。',
      location: '金茂大厦'
    }, {
      content: '垃圾分为，干垃圾，湿垃圾，有害垃圾，可回收垃圾，和我这个小垃圾。',
      location: '某垃圾丢弃点'
    }, {
      content: '这个路灯怕是已经罢工很多年？',
      location: '某匿名路灯'
    }, {
      content: '外婆家这边的这个小桥快要留不住了，因为是危桥，村里已经决定要拆了重建，所以我打算记下一些回忆——有瓜有粥有蒲扇，有笑有闹有故事，还有孩子的勾指，不燥的微风。夏天傍晚，人们在这里乘凉，各家拿出井里冰好的瓜和粥。因外婆熬的粥特别好喝，她常常多备几副碗筷，好分些给人家，当然了，对方也会给些西瓜或别的，做些简单的交换。无风的日子，大人们，常常带着蒲扇，小孩们挥不动蒲扇，就依偎到各自家人旁边，也就有“不劳而获“的风了，乘凉时的欢笑多是来自小家伙们意外频出的打闹，也有某人突然想起的一个趣事或是灵光一闪抖了个机灵，没有前翻后仰的大笑，却都是发自真心。村里没什么大事，所以经常把小事说细了，或把过去的大事重提，却也时提时新，总有说不完的话题，也不觉乏味。吃口瓜喝口粥，再来点甜玉米汤，我又跑进孩子群中，迎着河面的风，听着大家的笑声，想着接下来玩点什么。',
      location: '外婆桥'
    }, {
      content: '这里的夕阳，真的很美，每次路过都会驻足。这是我的小确幸，现在，分享给路过的，可爱的你们。',
      location: '阳光正好大桥'
    }, {
      content: '这个公交车站台是真的辣鸡，公交车行驶路线图都烂到看不清了。',
      location: '倒霉的我和破败的站台'
    }, {
      content: '昨天在这里偶遇了一个小姐姐，当时她拧不动瓶盖，帮她拧开了。她笑着向我道谢，那一刻，我的心，比阳光还要明媚。',
      location: '幸福火车站快乐号动车组'
    }, {
      content: '爱就一个字，我只说亿次。',
      location: '某景点/某许愿树'
    }, {
      content: '此刻，一位不愿意透露姓名的网友从某个裤裆下钻过。',
      location: '东方之门'
    }, {
      content: '虽然你闯红灯的样子很狼狈，但是你交罚款的样子真的很靓仔。',
      location: '人参十字路口'
    }
  ]
</script>

<style >
  .container {
  }
  .me_hd_bg_img {
    position: relative;
    width: 100%;
    height: 410rpx;
    z-index: 100;
  }
  .me_hd_photo {
    position: absolute;
    left: 300rpx;
    top: 40rpx;
    z-index: 1000;
    height: 150rpx;
    width: 150rpx;
    border-radius: 50%;
  }

  .me_hd_flex_group {
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    left: 0rpx;
    z-index: 1000;
    width: 750rpx;
  }
  .me_hd_name{
    top: 200rpx;
  }
  .me_hd_nameStr{
    padding-left: 40rpx;
    padding-right: 10rpx;
    color: white;
    font-size: 38rpx;
  }
  .me_hd_gender, .me_hd_edit {
    width: 30rpx;
    height: 30rpx;
    flex-shrink: 0;
  }
  .me_hd_desc_follow {
    top: 260rpx;
  }
  .me_hd_desc_following {
    color: white;
    font-size: 26rpx;
    text-align: right;
  }
  .me_hd_desc_separate {
    width: 2rpx;
    height: 30rpx;
    margin: 0 15rpx;
    background-color: white;
  }
  .me_hd_desc_followed {
    color: white;
    font-size: 26rpx;
    text-align: left;
  }
  .me_hd_signature {
    top: 300rpx;
  }
  .me_hd_desc_signature {
    color: white;
    font-size: 26rpx;
    text-align: center;

    text-overflow: -o-ellipsis-lastline;
    overflow: hidden;
    text-overflow: ellipsis;
    word-break: break-all; 
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    align-content: center;
  }
  .me_hd_desc_signature_gap {
    padding-left: 40rpx;
    padding-right: 10rpx;
  }
  .me_hd_notice_redDot {
    position: absolute;
    top: 55rpx;
    right: 10rpx;
    background-color: red;
    height: 16rpx;
    width: 16rpx;
    border-radius: 50%;
  }
  .me_hd_btn {
    line-height: 60rpx;
    height: 60rpx;
    border-radius: 30rpx;
    padding: 0rpx;
    background-color: transparent;
    font-size: 30rpx;
    color: white;
    border:3rpx solid white;

    position: absolute;
    top: 40rpx;
    z-index: 1000;
  }
  .me_hd_touch_btn {
    color: #ccc;
    border-color: #ccc;
  }
  .me_hd_notice{
    width: 240rpx;
    right: -30rpx;
  }
  .me_hd_favorites {
    width: 180rpx;
    top: 130rpx;
    right: -30rpx;
  }
  .me_hd_settings {
    width: 210rpx;
    top: 220rpx;
    right: -30rpx;
  }
  .me_hd_follow {
    width: 240rpx;
    top: 40rpx;
    left: -30rpx;
  }
  .me_hd_share {
    width: 140rpx;
    top: 130rpx;
    left: -30rpx;
  }
  .me_hd_element0{
    position: absolute;
    left: 325rpx;
    top: 75rpx;
    z-index: 10;
    width: 100rpx;
    height: 100rpx;
    border-radius: 50rpx;
    color: white;
    text-align: center;
    line-height: 100rpx;
    background-color: #11e9e9;
  }
  .me_hd_element1{
    position: absolute;
    left: 325rpx;
    top: 75rpx;
    z-index: 10;
    width: 100rpx;
    height: 100rpx;
    border-radius: 30rpx;
    color: white;
    text-align: center;
    line-height: 100rpx;
    background-color: #f09712;
  }
  .me_hd_element2{
    position: absolute;
    left: 325rpx;
    top: 75rpx;
    z-index: 10;
    width: 100rpx;
    height: 100rpx;
    border-top-right-radius: 50rpx;
    border-bottom-right-radius: 50rpx;
    color: white;
    text-align: center;
    line-height: 100rpx;
    background-color: #08f01c;
  }
  .me_hd_element3{
    position: absolute;
    left: 325rpx;
    top: 75rpx;
    z-index: 10;
    width: 100rpx;
    height: 100rpx;
    color: white;
    text-align: center;
    line-height: 100rpx;
    background-color: #eb6106;
  }

  .me_bd_memory {
    display: flex;
    padding: 20rpx 0 0 20rpx;
  }
  .me_bd_memory text {
    font-size: 28rpx;
    margin-left: 20rpx;
  }
  .me_bd_memory_icon {
    width: 40rpx;
    height: 40rpx;
  }

  .me_template{
    position: relative;
  }
  .me_template_bd_cover {
    position: absolute;
    top: 160rpx;
    height: 6366rpx;
    width: 750rpx;
    background-color: transparent;
  }
  .me_template_bd{
  }
</style>

<script  type='application/json'>
  {
    "component": true,
    "usingComponents": {
      "dialog": "./dialog",
      "navigationBar": "./navigationBar"
    }
  }
</script>

