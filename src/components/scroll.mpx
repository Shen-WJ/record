<template>
  <movable-area style="height: {{movableAreaH}}px;">
    <movable-view
      class="scroll"
      style="height: calc({{movableAreaH}}px + {{refreshSize}}rpx)"
      bind:change="change"
      bind:touchend="touchend"
      direction="vertical"
      out-of-bounds="{{true}}"
      disabled="{{refreshStatus >= 3}}"
      y='{{move}}'>
      <scroll-view
        class="scroll__view"
        style="padding-bottom: {{bottomSize}}rpx;padding-top: {{top}}rpx;"
        scroll-y="{{refreshStatus == 1}}"
        lower-threshold="750rpx"
        bindscrolltolower="more"
        bindscroll="scroll">
        <view id="refresh"
            class="scroll__refresh {{successShow ? 'scroll__refresh--hidden' : ''}}"
            style="height: {{refreshSize}}rpx;padding: {{(refreshSize - 50) / 2}}rpx 0;">
          <view class="la-square-jelly-box">
            <view></view>
            <view></view>
          </view>
        </view>
        <view id="success"
            class="scroll__success {{successShow ? 'scroll__success--show' : ''}} {{successTran ? 'scroll__success--tran' : ''}}"
            style="top: {{refreshSize - 60}}rpx;">
          <view>刷新成功</view>
        </view>
        <slot></slot>
        <view wx:if="{{listCount === 0 && emptyShow}}" class="scroll__empty">
          <image src="{{emptyUrl}}"></image>
          <view>{{emptyText}}</view>
        </view>
        <view wx:if="{{listCount !== 0}}" class="scroll__bottom">
          <view class="scroll__loading" wx:if="{{end}}">
            <view class="text">已全部加载</view>
          </view>
          <view class="scroll__loading" wx:else>
            <view class="la-line-spin-fade-rotating">
              <view></view>
              <view></view>
              <view></view>
              <view></view>
              <view></view>
              <view></view>
              <view></view>
              <view></view>
            </view>
            <view class="scroll__text">加载中...</view>
          </view>
        </view>
        <view class="bottomHolder" style="padding-bottom: {{tabBarBottom}}px;"/>
      </scroll-view>
    </movable-view>
  </movable-area>
</template>

<script>
  import { createComponent } from '@mpxjs/core'
  const app = getApp()

  createComponent({
    properties: {
      // 加载中
      requesting: {
        type: Boolean,
        value: false,
        observer: 'requestingEnd'
      },
      // 加载完毕
      end: {
        type: Boolean,
        value: false
      },
      // 控制空状态的显示
      emptyShow: {
        type: Boolean,
        value: false
      },
      // 当前列表长度
      listCount: {
        type: Number,
        value: 0
      },
      // 空状态的图片
      emptyUrl: {
        type: String,
        value: ''
      },
      // 空状态的文字提示
      emptyText: {
        type: String,
        value: '暂无内容'
      },
      // 距离顶部距离，一般为header高度，千万不可与refreshSize混淆
      top: {
        type: Number,
        value: 0
      },
      // 下拉刷新的高度，决定了movable-view向上收起的高度，即刷新出来的图标的高度
      refreshSize: {
        type: Number,
        value: 80,
        observer: 'refreshChange'
      },
      // 底部高度
      bottomSize: {
        type: Number,
        value: 0
      }
    },
    data: {
      navH: app.globalData.navHeight,
      movableAreaH: app.globalData.windowHeight - app.globalData.navHeight,
      tabBarBottom: app.globalData.tabBarBottom,

      mode: 'refresh', // refresh 和 more 两种模式
      successShow: false, // 显示success
      successTran: false, // 过度success
      /**
      * 1: 等待下拉刷新（正常处于此态）,
      * 2: 松开刷新（成功下拉到刷新所要求的位移并触发刷新）,
      * 3: 加载中（触发刷新后等待返回结果，并且页面不可滑动）,
      * 4: 加载完成（结果被通知后立即进入4，开始渲染“加载完成”的动画，页面不可滑动，结束动画后进入1）
      */
      refreshStatus: 0,
      move: -40 // movable-view 偏移量
    },
    methods: {
      /**
      * movable-view 滚动监听
      */
      change (e) {
        const { refreshStatus } = this

        // 判断如果状态加载中或者是完成中的动画则无视
        if (refreshStatus >= 3) {
          return
        }

        let diff = e.detail.y
        if (diff > (this.scrollHeight1 + 5) && this.scrollStatus === 'onFullScreen') {
          console.log('++++++++++++++++++++++++change', this.scrollStatus)
          this.scrollStatus = 'onPartScreen'
          this.triggerEvent('overRefresh')
        } else if (diff < (this.scrollHeight1 - 5) && this.scrollStatus === 'onPartScreen') {
          console.log('++++++++++++++++++++++++change', this.scrollStatus)
          this.scrollStatus = 'onFullScreen'
          this.triggerEvent('pullUpFromTop')
        }

        if (diff > -10) { // 下拉刷新的最少位移
          this.refreshStatus = 2
        } else {
          this.refreshStatus = 1
        }
      },
      /**
      * movable-view 触摸结束事件
      */
      touchend () {
        const { refreshStatus } = this

        if (refreshStatus === 2) {
          wx.vibrateShort()
          this.refreshStatus = 3
          this.$forceUpdate({
            move: 0
          })
          this.mode = 'refresh'
          this.triggerEvent('refresh')
        } else if (refreshStatus === 1) {
          this.$forceUpdate({
            move: this.scrollHeight1
          })
        }
      },
      /**
      * scroll-view 滚动
      */
      scroll (e) {
        const diff = e.detail.scrollTop
        if (diff < 20 && this.scrollStatus === 'onFullScreen') {
          console.log('++++++++++++++++++++++++scroll', this.scrollStatus)
          this.scrollStatus = 'onPartScreen'
          this.triggerEvent('overRefresh')
        } else if (diff > 20 && this.scrollStatus === 'onPartScreen') {
          console.log('++++++++++++++++++++++++scroll', this.scrollStatus)
          this.scrollStatus = 'onFullScreen'
          this.triggerEvent('pullUpFromTop')
        }
      },
      /**
      * 加载更多
      */
      more () {
        if (!this.properties.end) {
          this.mode = 'more'
          this.triggerEvent('more')
        }
      },
      /**
      * 监听 requesting 字段变化, 来处理下拉刷新对应的状态变化
      */
      requestingEnd (newVal, oldVal) {
        if (this.mode === 'more') {
          return
        }

        if (oldVal === true && newVal === false) {
          this.refreshStatus = 4
          this.$forceUpdate({
            move: this.scrollHeight2
          })
          setTimeout(() => {
            this.successShow = true
            setTimeout(() => {
              this.successTran = true
              this.$forceUpdate({
                move: this.scrollHeight1
              })
              setTimeout(() => {
                this.refreshStatus = 1
                this.successShow = false
                this.successTran = false
                // 此处必须用$forceUpdate，否则不刷新
                this.$forceUpdate({
                  move: this.scrollHeight1
                })
              }, 350)
            }, 1000)
          }, 650)
        } else {
          if (this.refreshStatus !== 3) {
            this.refreshStatus = 3
            this.$forceUpdate({
              move: 0
            })
          }
        }
      },
      /**
      * 监听下拉刷新高度变化, 如果改变重新初始化参数, 最小高度80rpx
      */
      refreshChange (newVal, oldVal) {
        if (newVal <= 80) {
          this.refreshSize = 80
        }
        setTimeout(() => {
          this.init()
        }, 0)
      },
      /**
      * 初始化scroll组件参数, 动态获取 下拉刷新区域 和 success 的高度
      */
      init () {
        // 默认onPartScreen，要考虑me和otherPeople不可随意修改，
        // 1: 过度下拉10px，触发overRefresh，2: 开始从顶部上拉浏览，触发pullUpFromTop，3: 全屏滑动中无视2
        this.scrollStatus = 'onPartScreen'

        let query = this.createSelectorQuery()
        query.select('#refresh').boundingClientRect()
        query.select('#success').boundingClientRect()
        query.exec(function (res) {
          this.scrollHeight1 = -res[0].height // refresh view 高度负值
          this.scrollHeight2 = res[1].height - res[0].height // refresh view - success view 高度负值
          this.$forceUpdate({
            move: this.scrollHeight1
          })
        }.bind(this))
      }
    },
    ready () {
      this.init()
    }
  })
</script>

<style>
  movable-area {
    width: 100%;
  }

  .scroll {
    width: 100%;
    height: calc(100vh + 80rpx);
  }
  .scroll__view {
    height: 100%;
    position: relative;
    box-sizing: border-box;
  }
  .scroll__success {
    position: absolute;
    z-index: 9;
    top: 30rpx;
    left: 0;
    width: 100%;
    height: 60rpx;
    line-height: 60rpx;
    font-size: 24rpx;
    text-align: center;
    opacity: 0;
    color: #2ab3f3;
  }
  .scroll__success:after {
    content: " ";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: currentColor;
    opacity: 0.7;
    transform: scaleX(0);
    transition: transform 0.15s ease-in-out;
    z-index: 0;
  }
  .scroll__success > view {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    color: #ffffff;
  }
  .scroll__success--show {
    opacity: 1;
  }
  .scroll__success--show:after {
    transform: scaleX(1);
  }
  .scroll__success--tran {
    opacity: 0;
    transition: opacity 0.3s linear;
  }
  .scroll__refresh {
    height: 80rpx;
    padding: 20rpx 0;
    box-sizing: border-box;
  }
  .scroll__refresh--hidden {
    visibility: hidden;
  }
  .scroll__empty {
    padding: 30rpx;
    text-align: center;
  }
  .scroll__empty image {
    width: 200rpx;
    height: 200rpx;
    margin: 160rpx auto 60rpx;
  }
  .scroll__empty view {
    color: #999999;
  }
  .scroll__bottom {
    height: 40rpx;
    padding: 30rpx 0;
  }
  .scroll__bottom > .scroll__loading {
    text-align: center;
    color: #999999;
  }
  .scroll__bottom > .scroll__loading > .scroll__text {
    display: inline-block;
    vertical-align: middle;
  }

  /* start: refresh */
  .la-square-jelly-box, .la-square-jelly-box > view {
    position: relative;
    box-sizing: border-box;
  }

  .la-square-jelly-box {
    width: 50rpx;
    height: 50rpx;
    margin: 0 auto;
    display: block;
    font-size: 0;
    color: #2ab3f3;
  }

  .la-square-jelly-box > view {
    display: inline-block;
    float: none;
    background-color: currentColor;
    opacity: 0.5;
  }

  .la-square-jelly-box > view:nth-child(1), .la-square-jelly-box > view:nth-child(2) {
    position: absolute;
    left: 0;
    width: 100%;
  }

  .la-square-jelly-box > view:nth-child(1) {
    top: -25%;
    z-index: 1;
    height: 100%;
    border-radius: 10%;
    animation: square-jelly-box-animate 0.6s -0.1s linear infinite;
  }

  .la-square-jelly-box > view:nth-child(2) {
    bottom: -9%;
    height: 10%;
    background: #000;
    border-radius: 50%;
    opacity: .2;
    animation: square-jelly-box-shadow 0.6s -0.1s linear infinite;
  }

  @keyframes square-jelly-box-shadow {
    50% {
      transform: scale(1.25, 1);
    }
  }
  @keyframes square-jelly-box-animate {
    17% {
      border-bottom-right-radius: 10%;
    }
    25% {
      transform: translateY(25%) rotate(22.5deg);
    }
    50% {
      border-bottom-right-radius: 100%;
      transform: translateY(50%) scale(1, 0.9) rotate(45deg);
    }
    75% {
      transform: translateY(25%) rotate(67.5deg);
    }
    100% {
      transform: translateY(0) rotate(90deg);
    }
  }
  /* end: refresh */
  /* start: more */
  .la-line-spin-fade-rotating, .la-line-spin-fade-rotating > view {
    position: relative;
    box-sizing: border-box;
  }

  .la-line-spin-fade-rotating {
    vertical-align: middle;
    display: inline-block;
    font-size: 0;
    color: currentColor;
    margin-right: 10rpx;
  }

  .la-line-spin-fade-rotating > view {
    display: inline-block;
    float: none;
    background-color: currentColor;
    border: 0 solid currentColor;
  }

  .la-line-spin-fade-rotating {
    width: 32rpx;
    height: 32rpx;
    animation: ball-spin-fade-rotating-rotate 6s infinite linear;
  }

  .la-line-spin-fade-rotating > view {
    position: absolute;
    width: 2rpx;
    height: 8rpx;
    margin: 4rpx;
    margin-top: -4rpx;
    margin-left: 0;
    border-radius: 0;
    animation: line-spin-fade-rotating 1s infinite ease-in-out;
  }

  .la-line-spin-fade-rotating > view:nth-child(1) {
    top: 15%;
    left: 50%;
    transform: rotate(0deg);
    animation-delay: -1.125s;
  }

  .la-line-spin-fade-rotating > view:nth-child(2) {
    top: 25.2512626585%;
    left: 74.7487373415%;
    transform: rotate(45deg);
    animation-delay: -1.25s;
  }

  .la-line-spin-fade-rotating > view:nth-child(3) {
    top: 50%;
    left: 85%;
    transform: rotate(90deg);
    animation-delay: -1.375s;
  }

  .la-line-spin-fade-rotating > view:nth-child(4) {
    top: 74.7487373415%;
    left: 74.7487373415%;
    transform: rotate(135deg);
    animation-delay: -1.5s;
  }

  .la-line-spin-fade-rotating > view:nth-child(5) {
    top: 84.9999999974%;
    left: 50.0000000004%;
    transform: rotate(180deg);
    animation-delay: -1.625s;
  }

  .la-line-spin-fade-rotating > view:nth-child(6) {
    top: 74.7487369862%;
    left: 25.2512627193%;
    transform: rotate(225deg);
    animation-delay: -1.75s;
  }

  .la-line-spin-fade-rotating > view:nth-child(7) {
    top: 49.9999806189%;
    left: 15.0000039834%;
    transform: rotate(270deg);
    animation-delay: -1.875s;
  }

  .la-line-spin-fade-rotating > view:nth-child(8) {
    top: 25.2506949798%;
    left: 25.2513989292%;
    transform: rotate(315deg);
    animation-delay: -2s;
  }

  @keyframes ball-spin-fade-rotating-rotate {
    100% {
      transform: rotate(360deg);
    }
  }
  @keyframes line-spin-fade-rotating {
    50% {
      opacity: 0.2;
    }
    100% {
      opacity: 1;
    }
  }
  .bottomHolder {
    width: 100%;
    height: 48px;
  }
  /* end: more */
</style>

<script type='application/json' lang='json'>
  {
    "component": true
  }
</script>

